"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ SQLite.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python migrate_sqlite_to_postgres.py

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
1. PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
2. –í .env —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL –¥–ª—è PostgreSQL
3. –§–∞–π–ª data/app.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º app
sys.path.insert(0, str(Path(__file__).parent))

from sqlmodel import SQLModel, create_engine, Session, select
from app.models import Observation, OrbitSolution


def migrate_data():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL"""
    
    # –ü—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑–µ
    sqlite_path = Path(__file__).parent.parent / "data" / "app.db"
    
    if not sqlite_path.exists():
        print(f"‚ùå SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {sqlite_path}")
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å —á–∏—Å—Ç–æ–π PostgreSQL –±–∞–∑—ã.")
        return
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
    sqlite_url = f"sqlite:///{sqlite_path}"
    sqlite_engine = create_engine(sqlite_url, connect_args={"check_same_thread": False})
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    postgres_url = os.getenv("DATABASE_URL")
    if not postgres_url:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    if postgres_url.startswith("sqlite"):
        print("‚ùå DATABASE_URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ SQLite, –∞ –Ω–µ PostgreSQL!")
        print("–û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    postgres_engine = create_engine(postgres_url, echo=False, pool_pre_ping=True)
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
    print("üì¶ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...")
    SQLModel.metadata.create_all(postgres_engine)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
    with Session(sqlite_engine) as sqlite_session:
        observations = sqlite_session.exec(select(Observation)).all()
        orbit_solutions = sqlite_session.exec(select(OrbitSolution)).all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {len(observations)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π –æ—Ä–±–∏—Ç: {len(orbit_solutions)}")
        
        if not observations and not orbit_solutions:
            print("‚ÑπÔ∏è  SQLite –±–∞–∑–∞ –ø—É—Å—Ç–∞—è - –Ω–µ—á–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å.")
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ PostgreSQL
        with Session(postgres_engine) as postgres_session:
            # –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
            if observations:
                print("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...")
                for obs in observations:
                    new_obs = Observation(
                        id=obs.id,
                        ra_hours=obs.ra_hours,
                        dec_degrees=obs.dec_degrees,
                        observation_time=obs.observation_time,
                        photo_path=obs.photo_path,
                        created_at=obs.created_at,
                    )
                    postgres_session.add(new_obs)
                
                postgres_session.commit()
                print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(observations)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –æ—Ä–±–∏—Ç
            if orbit_solutions:
                print("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–µ—à–µ–Ω–∏—è –æ—Ä–±–∏—Ç...")
                for solution in orbit_solutions:
                    new_solution = OrbitSolution(
                        id=solution.id,
                        semi_major_axis_au=solution.semi_major_axis_au,
                        eccentricity=solution.eccentricity,
                        inclination_deg=solution.inclination_deg,
                        raan_deg=solution.raan_deg,
                        arg_periapsis_deg=solution.arg_periapsis_deg,
                        perihelion_time=solution.perihelion_time,
                        closest_approach_time=solution.closest_approach_time,
                        closest_distance_km=solution.closest_distance_km,
                        relative_speed_kms=solution.relative_speed_kms,
                        source_observation_ids=solution.source_observation_ids,
                        created_at=solution.created_at,
                    )
                    postgres_session.add(new_solution)
                
                postgres_session.commit()
                print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(orbit_solutions)} —Ä–µ—à–µ–Ω–∏–π –æ—Ä–±–∏—Ç")
    
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("2. –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É data/ —Å SQLite –±–∞–∑–æ–π")
    print("3. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫–µ uploads/ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ")


if __name__ == "__main__":
    try:
        migrate_data()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
